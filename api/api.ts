/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Consultation
 */
export interface Consultation {
    /**
     * 
     * @type {number}
     * @memberof Consultation
     */
    'id'?: number;
    /**
     * 
     * @type {User}
     * @memberof Consultation
     */
    'user': User;
    /**
     * 
     * @type {Mentor}
     * @memberof Consultation
     */
    'mentor': Mentor;
    /**
     * 
     * @type {string}
     * @memberof Consultation
     */
    'desirableDate': string;
    /**
     * 
     * @type {string}
     * @memberof Consultation
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ConsultationRequest
 */
export interface ConsultationRequest {
    /**
     * 
     * @type {number}
     * @memberof ConsultationRequest
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsultationRequest
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof ConsultationRequest
     */
    'mentorId': number;
    /**
     * 
     * @type {string}
     * @memberof ConsultationRequest
     */
    'desirableDate': string;
    /**
     * 
     * @type {string}
     * @memberof ConsultationRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Mentor
 */
export interface Mentor {
    /**
     * 
     * @type {number}
     * @memberof Mentor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Mentor
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Mentor
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Mentor
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Mentor
     */
    'clickCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Mentor
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof Mentor
     */
    'eduOrg'?: string;
    /**
     * 
     * @type {Term}
     * @memberof Mentor
     */
    'term'?: Term;
    /**
     * 
     * @type {Set<Type>}
     * @memberof Mentor
     */
    'type'?: Type[];
    /**
     * 
     * @type {number}
     * @memberof Mentor
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Term
 */
export interface Term {
    /**
     * 
     * @type {number}
     * @memberof Term
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Term
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
    /**
     * 
     * @type {number}
     * @memberof Type
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'uid'?: string;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'username'?: string;
    /**
     * If a new email is given, the user\'s email verified property will be set to false.
     * @type {string}
     * @memberof UserRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface UserRequest1
 */
export interface UserRequest1 {
    /**
     * 
     * @type {string}
     * @memberof UserRequest1
     */
    'username'?: string;
    /**
     * If a new email is given, the user\'s email verified property will be set to false.
     * @type {string}
     * @memberof UserRequest1
     */
    'email'?: string;
}

/**
 * ConsultationApi - axios parameter creator
 * @export
 */
export const ConsultationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all consultations
         * @param {number} [userId] Get consultations of a specific user
         * @param {number} [mentorId] Get consultations of a specific mentor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsultations: async (userId?: number, mentorId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/consultations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (mentorId !== undefined) {
                localVarQueryParameter['mentorId'] = mentorId;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Consultation details
         * @summary Create a consultation
         * @param {ConsultationRequest} [consultationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postConsultation: async (consultationRequest?: ConsultationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/consultation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(consultationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsultationApi - functional programming interface
 * @export
 */
export const ConsultationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsultationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all consultations
         * @param {number} [userId] Get consultations of a specific user
         * @param {number} [mentorId] Get consultations of a specific mentor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsultations(userId?: number, mentorId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Consultation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsultations(userId, mentorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Consultation details
         * @summary Create a consultation
         * @param {ConsultationRequest} [consultationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postConsultation(consultationRequest?: ConsultationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Consultation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postConsultation(consultationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsultationApi - factory interface
 * @export
 */
export const ConsultationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsultationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all consultations
         * @param {number} [userId] Get consultations of a specific user
         * @param {number} [mentorId] Get consultations of a specific mentor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsultations(userId?: number, mentorId?: number, options?: any): AxiosPromise<Array<Consultation>> {
            return localVarFp.getConsultations(userId, mentorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Consultation details
         * @summary Create a consultation
         * @param {ConsultationRequest} [consultationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postConsultation(consultationRequest?: ConsultationRequest, options?: any): AxiosPromise<Consultation> {
            return localVarFp.postConsultation(consultationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConsultationApi - object-oriented interface
 * @export
 * @class ConsultationApi
 * @extends {BaseAPI}
 */
export class ConsultationApi extends BaseAPI {
    /**
     * 
     * @summary Get all consultations
     * @param {number} [userId] Get consultations of a specific user
     * @param {number} [mentorId] Get consultations of a specific mentor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationApi
     */
    public getConsultations(userId?: number, mentorId?: number, options?: AxiosRequestConfig) {
        return ConsultationApiFp(this.configuration).getConsultations(userId, mentorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Consultation details
     * @summary Create a consultation
     * @param {ConsultationRequest} [consultationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationApi
     */
    public postConsultation(consultationRequest?: ConsultationRequest, options?: AxiosRequestConfig) {
        return ConsultationApiFp(this.configuration).postConsultation(consultationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MentorApi - axios parameter creator
 * @export
 */
export const MentorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a mentor
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorByMentorId: async (mentorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mentorId' is not null or undefined
            assertParamExists('getMentorByMentorId', 'mentorId', mentorId)
            const localVarPath = `/mentor/{mentorId}`
                .replace(`{${"mentorId"}}`, encodeURIComponent(String(mentorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all mentors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentors: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mentors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update mentor\'s information
         * @param {string} mentorId 
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMentor: async (mentorId: string, mentor?: Mentor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mentorId' is not null or undefined
            assertParamExists('patchMentor', 'mentorId', mentorId)
            const localVarPath = `/mentor/{mentorId}`
                .replace(`{${"mentorId"}}`, encodeURIComponent(String(mentorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(mentor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a mentor
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMentor: async (mentor?: Mentor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mentor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(mentor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MentorApi - functional programming interface
 * @export
 */
export const MentorApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MentorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a mentor
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMentorByMentorId(mentorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mentor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMentorByMentorId(mentorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all mentors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMentors(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Mentor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMentors(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update mentor\'s information
         * @param {string} mentorId 
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchMentor(mentorId: string, mentor?: Mentor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mentor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchMentor(mentorId, mentor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a mentor
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMentor(mentor?: Mentor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mentor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMentor(mentor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MentorApi - factory interface
 * @export
 */
export const MentorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MentorApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a mentor
         * @param {string} mentorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentorByMentorId(mentorId: string, options?: any): AxiosPromise<Mentor> {
            return localVarFp.getMentorByMentorId(mentorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all mentors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMentors(options?: any): AxiosPromise<Array<Mentor>> {
            return localVarFp.getMentors(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update mentor\'s information
         * @param {string} mentorId 
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchMentor(mentorId: string, mentor?: Mentor, options?: any): AxiosPromise<Mentor> {
            return localVarFp.patchMentor(mentorId, mentor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a mentor
         * @param {Mentor} [mentor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMentor(mentor?: Mentor, options?: any): AxiosPromise<Mentor> {
            return localVarFp.postMentor(mentor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MentorApi - object-oriented interface
 * @export
 * @class MentorApi
 * @extends {BaseAPI}
 */
export class MentorApi extends BaseAPI {
    /**
     * 
     * @summary Get a mentor
     * @param {string} mentorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MentorApi
     */
    public getMentorByMentorId(mentorId: string, options?: AxiosRequestConfig) {
        return MentorApiFp(this.configuration).getMentorByMentorId(mentorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all mentors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MentorApi
     */
    public getMentors(options?: AxiosRequestConfig) {
        return MentorApiFp(this.configuration).getMentors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update mentor\'s information
     * @param {string} mentorId 
     * @param {Mentor} [mentor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MentorApi
     */
    public patchMentor(mentorId: string, mentor?: Mentor, options?: AxiosRequestConfig) {
        return MentorApiFp(this.configuration).patchMentor(mentorId, mentor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a mentor
     * @param {Mentor} [mentor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MentorApi
     */
    public postMentor(mentor?: Mentor, options?: AxiosRequestConfig) {
        return MentorApiFp(this.configuration).postMentor(mentor, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TermApi - axios parameter creator
 * @export
 */
export const TermApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermApi - functional programming interface
 * @export
 */
export const TermApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TermApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Term>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTerms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TermApi - factory interface
 * @export
 */
export const TermApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TermApiFp(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(options?: any): AxiosPromise<Array<Term>> {
            return localVarFp.getTerms(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TermApi - object-oriented interface
 * @export
 * @class TermApi
 * @extends {BaseAPI}
 */
export class TermApi extends BaseAPI {
    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermApi
     */
    public getTerms(options?: AxiosRequestConfig) {
        return TermApiFp(this.configuration).getTerms(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TypeApi - axios parameter creator
 * @export
 */
export const TypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TypeApi - functional programming interface
 * @export
 */
export const TypeApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Type>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TypeApi - factory interface
 * @export
 */
export const TypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypes(options?: any): AxiosPromise<Array<Type>> {
            return localVarFp.getTypes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TypeApi - object-oriented interface
 * @export
 * @class TypeApi
 * @extends {BaseAPI}
 */
export class TypeApi extends BaseAPI {
    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeApi
     */
    public getTypes(options?: AxiosRequestConfig) {
        return TypeApiFp(this.configuration).getTypes(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUid: async (uid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserByUid', 'uid', uid)
            const localVarPath = `/user/uid/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserId: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByUserId', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {number} userId Id of an existing user.
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUsersUserId: async (userId: number, userRequest?: UserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('patchUsersUserId', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user.
         * @summary Create New User
         * @param {User} [user] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {string} uid 
         * @param {UserRequest1} [userRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByUserId: async (uid: string, userRequest1?: UserRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserByUserId', 'uid', uid)
            const localVarPath = `/user/uid/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUid(uid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUid(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUserId(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {number} userId Id of an existing user.
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUsersUserId(userId: number, userRequest?: UserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUsersUserId(userId, userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user.
         * @summary Create New User
         * @param {User} [user] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {string} uid 
         * @param {UserRequest1} [userRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserByUserId(uid: string, userRequest1?: UserRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserByUserId(uid, userRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User UID
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUid(uid: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByUid(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {number} userId Id of an existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserId(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {number} userId Id of an existing user.
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUsersUserId(userId: number, userRequest?: UserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.patchUsersUserId(userId, userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user.
         * @summary Create New User
         * @param {User} [user] Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(user?: User, options?: any): AxiosPromise<User> {
            return localVarFp.postUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the information of an existing user.
         * @summary Update User Information
         * @param {string} uid 
         * @param {UserRequest1} [userRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByUserId(uid: string, userRequest1?: UserRequest1, options?: any): AxiosPromise<User> {
            return localVarFp.updateUserByUserId(uid, userRequest1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get User Info by User UID
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUid(uid: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByUid(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get User Info by User ID
     * @param {number} userId Id of an existing user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUserId(userId: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all users
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the information of an existing user.
     * @summary Update User Information
     * @param {number} userId Id of an existing user.
     * @param {UserRequest} [userRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public patchUsersUserId(userId: number, userRequest?: UserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).patchUsersUserId(userId, userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user.
     * @summary Create New User
     * @param {User} [user] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUser(user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the information of an existing user.
     * @summary Update User Information
     * @param {string} uid 
     * @param {UserRequest1} [userRequest1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserByUserId(uid: string, userRequest1?: UserRequest1, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserByUserId(uid, userRequest1, options).then((request) => request(this.axios, this.basePath));
    }
}


